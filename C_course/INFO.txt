Chaptires :

    1 - Introduction to variables

    2 - Introduction to the preprocessor
        * We need to look at good additonal resources to examine how preprocessor works 

    3 - Introduction to arrays in C
    4 - Introduction to Strings in C
    5 - Introduction to Conditional Statements
    6 - Introduction to loops in C
    7 - Introduction to functions in C
    8 - Introduction to structures in C
    9 - Introduction to Union in C
    
    10 - Introduction to Pointer in C
    11 - Introduction to Dynamic Memory Allocation 
    12 - Introduction to Static Memory Allocation
    13 - Introduction to pointor to pointor in C

    14 - Use valgrind to detect memory leaks issue in your code 
        * No lessons is giving for this chaptire for now

    15 - what's _glibc ? 
        * No lessons is giving for this chapitre for now 
        * kindly examine one ELF programe with file and check it also with ldd
            -  check what linux-vdso.so.1 referre to ? 
            -  check what libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 referre to ? 
            -  /lib64/ld-linux-x86-64.so.2  referre to ? 
    
    16 - how to read a man page ?
        * No lessons is giving for this captire for now 
        * some tipes will be added in the folder of this lessons on how to read and keep an eye on some detailles in man page 

    17 - checking for errors with errno 
    18 - Introduction to File Descriptor in C
    19 - File output Introduction in C
    20 - File Input Introduction in C
    21 - File Metadata Introduction in C

    22 - Variables types Introduction in C
        * Special Variables Types outside the standard types 

    23 - Type Casting
    24 - Multi module Programming in C
        * Don't do a spaghetti code --> code is not organized code when it will be too hard to follow
        * Simple Code structure
            - include // have all the *.h files 
            - src   // have all the *.c files 
            - bin   // have all the binaires ( executable )

    25 - Build systems
    26 - Creating a Library 
        * Shared Library vs Static library 
        --> compile process in our first example ( Static library )
            1 - gcc -o lib.o -c lib.C
            2 - ar rcs libteehee.a lib.o
            3 - mv libtee/libteehee.a . 
            4 - gcc -o main main.c libteehee.a -Ilibtee 

        --> compile process in our first example ( Shared Library )
            1 - gcc -o libtheehee.so lib.c -Shared
            2 - examine libtheehee.so with file command to make sure it's now a shared object 
            3 - gcc -o main main.c -Ilibtee -ltheehee -L$(pwd)
            4 - you can link it by added it to variable LD_LIBRARY_PATH 